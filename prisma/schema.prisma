// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  ADMIN
  WORKER
  DRIVER
}

enum OrderStatus {
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
  COMPLETED
  APPROVED
  PURCHASED
  REJECTED
  PENDING
  RECEIVED_IN_TURKEY
  IN_TRANSIT
  DELIVERED_TO_WAREHOUSE
  PREPAID
}

model User {
  id                 Int                  @id @default(autoincrement())
  phoneNumber        String               @unique
  name               String
  password           String
  address            String?
  city               String?
  country            String?
  role               Role                 @default(CUSTOMER)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  orders             Order[]
  isActive           Boolean              @default(true)
  lastLogin          DateTime?
  Announcement       Announcement[]
  Invoice            Invoice[]
  OrderStatusHistory OrderStatusHistory[]
}

model Order {
  id                 Int                  @id @default(autoincrement())
  title              String?
  size               String?
  color              String?
  country            Country              @default(TURKEY)
  quantity           Int                  @default(1)
  price              Float                @default(0)
  shippingPrice      Float                @default(0)
  localShippingPrice Float                @default(0)
  status             OrderStatus          @default(PENDING)
  orderNumber        String?              
  productLink        String?
  imageUrl           String?
  notes              String?
  user               User                 @relation(fields: [userId], references: [id])
  userId             Int
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  prepaid            Boolean              @default(false)
  invoice            Invoice?             @relation(fields: [invoiceId], references: [id])
  invoiceId          Int?
  statusHistory      OrderStatusHistory[]

  @@index([userId])
  @@index([status])
  @@index([invoiceId])
}

enum Country {
  TURKEY
  USA
  UK
  UAE
  EUROPE
  OTHER
}

model OrderStatusHistory {
  id        Int         @id @default(autoincrement())
  status    OrderStatus
  notes     String?
  order     Order       @relation(fields: [orderId], references: [id])
  orderId   Int
  user      User        @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime    @default(now())

  @@index([orderId])
  @@index([userId])
}

enum AnnouncementCategory {
  INFO
  UPDATE
  ALERT
}

model Announcement {
  id          Int                  @id @default(autoincrement())
  title       String
  content     String
  category    AnnouncementCategory @default(INFO)
  isImportant Boolean              @default(false)
  expiresAt   DateTime?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  createdBy   User                 @relation(fields: [userId], references: [id])
  userId      Int
  isActive    Boolean              @default(true)

  @@index([userId])
  @@index([category])
  @@index([isActive])
}

model Banner {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  imageUrl    String
  link        String?
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([isActive])
  @@index([order])
}

enum InvoiceStatus {
  PAID
  PENDING
  OVERDUE
}

model Invoice {
  id            Int           @id @default(autoincrement())
  invoiceNumber String        @unique
  date          DateTime      @default(now())
  dueDate       DateTime
  status        InvoiceStatus @default(PENDING)
  total         Float
  paymentMethod String?
  notes         String?
  orders        Order[]
  user          User          @relation(fields: [userId], references: [id])
  userId        Int
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([userId])
  @@index([status])
}

model ExchangeRate {
  id        Int      @id @default(autoincrement())
  rate      Float // Rate in TRY per 1 USD (e.g., 35.00)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([createdAt(sort: Desc)])
}
